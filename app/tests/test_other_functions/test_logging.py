from contextlib import nullcontext
import pytest
from app.logger import get_logger
import tkinter as tk

NAME_LOGGER = 'TestLogger'
FORMATTER_LOGGER = "%(name)s %(asctime)s %(levelname)s %(message)s"
FILEMODE_LOGGER = 'w'
ENCODING_LOGGER = 'UTF-8'

GET_LOGGER_ARGUMENTS = (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER)


@pytest.mark.skip(
    reason="This test creating logfiles and I can't delete it from code.\n"
           " If you want to test the get_logger function, just comment skip-decorator")
@pytest.mark.parametrize(
    'name, formatter, filemode, encoding',
    [
        GET_LOGGER_ARGUMENTS,
        (123, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ('string', FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ({1, 2, 3}, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ((1, 2, 3), FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ([], FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ([1, 2, 3], FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        ({1: 2}, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        (None, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        (False, FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),
        (tk.Tk(), FORMATTER_LOGGER, FILEMODE_LOGGER, ENCODING_LOGGER),

        (NAME_LOGGER, 123, FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, 'string', FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, {1, 2, 3}, FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, (1, 2, 3), FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, [], FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, [1, 2, 3], FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, {1: 2}, FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, None, FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, False, FILEMODE_LOGGER, ENCODING_LOGGER),
        (NAME_LOGGER, tk.Tk(), FILEMODE_LOGGER, ENCODING_LOGGER),

        (NAME_LOGGER, FORMATTER_LOGGER, 123, ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, 'string', ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, {1, 2, 3}, ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, (1, 2, 3), ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, [], ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, [1, 2, 3], ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, {1: 2}, ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, None, ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, False, ENCODING_LOGGER),
        (NAME_LOGGER, FORMATTER_LOGGER, tk.Tk(), ENCODING_LOGGER),

        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, 123),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, 'string'),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, {1, 2, 3}),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, (1, 2, 3)),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, []),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, [1, 2, 3]),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, {1: 2}),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, None),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, False),
        (NAME_LOGGER, FORMATTER_LOGGER, FILEMODE_LOGGER, tk.Tk()),

    ]
)
def test_get_logger_name(name, formatter, filemode, encoding):
    with nullcontext():
        get_logger(name=name, formatter=formatter, filemode=filemode,
                   encoding=encoding)
